# -*- coding: utf-8 -*-
"""spotifydatacleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oxzGG96Qwt6dj3XTl8mdA9dYaZKWE7nO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

df=pd.read_csv('/content/dataset.csv')
df

df.isnull().sum()

df=df.dropna()
df

df = df.drop_duplicates()

df

#to recheck if all the null elements are deleted
df.isnull().sum().sum()

df=pd.DataFrame(df)

df_sorted = df.sort_values(by='popularity', ascending=False)
df_sorted

"""### **Ask user the genre and print top 10 songs**"""

gen=input("Enter the genre: ")
columns=['artists','album_name','track_name','popularity']
df_sorted[df_sorted['track_genre']==gen][columns].head(10)

"""### **Top 10 Songs by user's choice artist**"""

singer=input("Enter the artist: ")
columns=['artists','album_name','track_name','popularity']
df_sorted[df_sorted['artists']==singer][columns].head(10)

"""### **To check availability of song in non-explicit version**"""

song_name=input("Enter the song name: ")
if df_sorted[(df_sorted['track_name'] == song_name) & (df_sorted['explicit'] == 0)].empty:
    print("Song is not available in non-explicit version")
else:
    print("Song is available in non-explicit version")

"""### Current popular genre using graphs"""

top_genres = df_sorted['track_genre'].value_counts().head(5).index.tolist()
top_genres

if 'track_genre' in df_sorted.columns:
    top_genres = df_sorted['track_genre'].value_counts().head(5)
    genres = top_genres.index.tolist()
    counts = top_genres.values.tolist()

    print("Top 5 Music Genres:")
    for genre, count in zip(genres, counts):
        print(f"Genre: {genre}, Count: {count}")

plt.bar(genres, counts, color='skyblue')
plt.title('Top 5 Music Genres')
plt.xlabel('Genres')
plt.ylabel('Counts')
plt.show()

"""### **Top 5 Artists**"""

df_sorted['artist_list'] = df_sorted['artists'].str.split(';')

if 'artist_list' in df_sorted.columns:
    top_artists = df_sorted['artist_list'].value_counts().head(5)
    artist_names = top_artists.index.tolist()
    counts = top_artists.values.tolist()

    print("Top 5 Artists:")
    for artist, count in zip(artist_names, counts):
        print(f"Artist: {artist}, Count: {count}")